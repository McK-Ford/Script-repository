USEFUL AWK COMMANDS
awk 'max<$4 || NR==1 {max=$4; data=$0} END{print data}' inputFile #finds the maximum value in field
#4 of inputFile and prints the row associated with that maximum value
awk '{if ($1 = $4) {print $0}}' inputFile > outputFile #filters for field 1 matching field 4, print full row to output if true.

awk -f/t '{arr[$KEYFIELD]++} END{for (a in arr) print a, arr[a]}' #that would group by the key field and get the count of number of occurences of the things in the key field. So if I wanted to get the number of occurences of a unique gene id this is how I would do it. Now, to get the max in a different column based on this, then print the row that corresponds to each max... ooph that's gonna be more difficult than I think. Modification to sum ages instead of counting records someone recommended: +=$2 instead of ++. So... a max 4 in that section might work?

awk 'BEGIN{FS=OFS="/t"} {if (a[$1]<$4) {a[$1]=$4; data[$1]=$0}} END {for (i in a) print data[i];}'
okay so here is what this is saying in human readable form. Input and output field separators are tabs. If the item in array field 1 is less than the value of field 4, replace array field 1 (would you swap this with a different field number if you wanted one?) with the value in field 4. It then also makes a second array called data, where you just append all fields to the relevant key. After you have both arrays fully built, you iterate over the array so you can print it to a file.

awk -F"/t" '{a[$2]} END {for (i in a) print i;}' table1 #get unique occurences in field of interest

awk '{if (10=="+") {print $0}}' works fine... arrow goes like so > so I didn't do it the wrong direction!!!

awk arrays are key value pairs. unstructured and invisible, technically has no order and is not sorted unless you tell it to be sorted.

https://www.datafix.com.au/cookbook/tables2.html#1
